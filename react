////////////////// VSCODE
Les modules conseillés :
    ES7+ React/Redux/React-Native snippets par dsznajder
        permet notament de créer des composants avec rafce (function), rcc (objet)

////////////////// INSTALLATION
npx create-react-app <répertoire>
    répertoire est le répertoire de l'appli qui se créé
cd <répertoire>
    optionel : ajouter tailwind
        npm install -D tailwindcss
        npx tailwindcss init
        ajouter les extension module.exports.content : "./src/**/*.{js,jsx,ts,tsx}"
        Dans /src/index.css ajouter
            @tailwind base;
            @tailwind components;
            @tailwind utilities;
npm start ou npm run start (démarre le serveur local)
ajouter un composant
    créer un répertoire components dans /src

////////////////// COMPONENT
Le component renvoie (render) un unique élément html (on encapsule tout dans une div)
Pour ajouter un component, ajouter un fichier .js  avec le nom du component qui commence par une maj.
On peut déclarer un component sous forme de fonction ou de classe.
Dans tout les cas le component doit contenir
    import React from 'react'
    Le composant : une fonction ou un objet qui rend un élément html
    export default <nomFonctionOuObjet>
COMPONENT FONCTION
    const test = () => { return (<div>html</div>) }
COMPONENT CLASS
    Pour import le component, on peut le faire en même temps que le React
        import React, { Component } from 'react'
    Pour export la classe, on peut soit export default <className> à la fin, soit export default toute la classe
    La classe extends Component
    La classe doit comporter une méthode render() qui return l'élament html avec la même syntaxe que le component fonction
        render() ne retourne qu'un seul élément, en général on met tous le html dans une div.
    On peut y ajouter un constructeur qui commence par super();
        constructor(){ super(); }
    Pour faire de l'événementiel, on peut mettre des événements dans le html du render et lui faire appeler une méthode
        <button onclick="{() => this.<methode>()}">clic</button>
        ou : <button onclick="{this.<methode>().bind(this)}">clic</button>
            On doit donner le contexte de this, sinon il est appelé automatiquement par le component sans passer la l'événement et fait une boucle infinie
    la méthode créée accède aux props et states
        par ex : add(){ this.setState({ cpt: this.state.cpt+1 }) }


////////////////// HOOKS
Ce sont des fonctions qui commencent par use, dédiées à l'UI.


////////////////// PROPS (propriétés immutables) et STATES (propriétés mutables)
//https://openclassrooms.com/fr/courses/8228131-gerez-votre-application-react-avec-redux-et-redux-toolkit/8305841-decouvrez-le-state-management
Les props descendent et les states remontent
PROPS
    Dans l'app.js où le commponent est importé, ajouter un attribut et une valeur
        <component attribut={val} />
    La valeur est maintenant utilisable dans le component
        const UserName = ({ name }) => { return <p>{attribut}</p>
    On peut avoir une cascade de props descendants qu'on appelle props drilling
STATES
    Affiche une variable dynamiquement (si on la modifie elle changera partout où elle est appelée dans le code html
        const [myState, setMyState] = useState(0)
    On l'utilise comme une variable et la modifie avec un setter (setMyState)
        <span>Valeur du compteur: {MyState}</span> <button onClick={() => setMyState(MyState + 1)}>ajouter</button>

////////////////// CONVENTIONS
Dans un constructeur en react, toujours mettre super(); dedans
    Par ex : constructor(){ super(); this.state = { cpt: 0 } }

////////////////// CODE EXEMPLE
