////////// INSTALLATION
Nouveau projet
    composer create-project laravel/laravel <NomProjet>
Projet cloné
    composer install
Installer filament (admin)
    composer require filament/filament:"^3.2" -W
    php artisan filament:install --panels
    php artisan make:filament-user
        accessible dans /admin
Installer Breeze (authentification)
    composer require laravel/breeze --dev

Installer le front-end
    php artisan breeze:install blade
Démarrer le front-end
    npm run dev
Démarer le back-end
    php artisan serve
        Ne pas oublier de migrer la bdd avec
Générer une clé app
    php artisan key:generate
        La clé permet à l'application de fonctionner et est stockée dans le .env, il faut donc la générer quand on clone un projet'

////////// ROUTE
On a besoin d'un controlleur, d'une route.
Création du controlleur
    php artisan make:model -mrc <Nom>
        Créé le modèle dans app/Models/<Nom>
        Créé la migration de table dans database/migrations/<timestamp>_create_<nom>_table.php
        Créé le controlleur dans app/Http/Controllers/<Nom>>Controller.php
On modifie la route dans routes/web.php? Par exemple en rajoutant :
    Route::resource('<nomRoute>', <Nom>Controller::class)//La route <nomRoute> est créée en prenant comme modèle <Nom>Controller
    ->only(['index', 'store'])//Les méthodes de <Nom>Controller utilisées
    ->middleware(['auth', 'verified']);//Requiert l'authentification
Dans le controlleur on modifie la route de base avec l'envoie d'un objet "use Illuminate\Http\Response"
    public function index(): Response{
        return response('Hello, World!');
    }


////////// BASE DE DONNEES
Recompiler la BDD
    première fois :
        php artisan migrate
    les fois suivantes :
        php artisan migrate:fresh
Créer une table
    php artisan make:model <nomTable> [-mrc]
        -mrc : 3 options (flags) -mmmigration, --resource, --controller
            Liste des commandes
                -a, --all             Generate a migration, seeder, factory, policy, resource controller, and form request classes for the model
                -c, --controller      Create a new controller for the model
                -f, --factory         Create a new factory for the model
                    --force           Create the class even if the model already exists
                -m, --migration       Create a new migration file for the model
                    --morph-pivot     Indicates if the generated model should be a custom polymorphic intermediate table model
                    --policy          Create a new policy for the model
                -s, --seed            Create a new seeder for the model
                -p, --pivot           Indicates if the generated model should be a custom intermediate table model
                -r, --resource        (CRUD) Indicates if the generated controller should be a resource controller
                    --api             Indicates if the generated controller should be an API resource controller
                -R, --requests        Create new form request classes and use them in the resource controller
                    --test            Generate an accompanying PHPUnit test for the Model
                    --pest            Generate an accompanying Pest test for the Model
                -h, --help            Display help for the given command. When no command is given display help for the list command
                -q, --quiet           Do not output any message
                -V, --version         Display this application version
                    --ansi|--no-ansi  Force (or disable --no-ansi) ANSI output
                -n, --no-interaction  Do not ask any interactive question
                    --env[=ENV]       The environment the command should run under
                -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
AJOUTER UN CHAMP BDD
    modifier la migration /database/migrations/<date>_create_<table>_table.php
        dans up(), et dans Schema::create, par exemple ajouter un champ $table->string('email')->unique();
            on peut faire un migrate ou migrate:fresh pour mettre à jour la bdd
    modifier le modèle /app/Models/<Table>.php
        dans protected $fillable, ajouter le champ s'il doit être remplis par l'utilisateur
    modifier le controlleur /app/Http/Controllers/<table>Controller.php



Afficher les infos sur la base de données
    php artisan db:show
Afficher les infos d'une table
    php artisan db:table users


////////// FILAMENT
Créer un user avec des champs perso
    php artisan make:command CreateCustomFilamentUser



////////// NOTIFICATIONS
php artisan make:notification <nomNotif>
    Créé app/Notifications/<nomNotif>.php
php artisan make:event <nomEvent>
    Créé un événement dans app/Events/<nomEvent>.php
php artisan make:listener <NomEventListener> --event=<nomEvent>
    Créé un event listener dans app/Listeners/<NomEventListener>.php


////////// DOC INFO
Le middleware est utilisé pour filtrer des requêtes http. Il est par exemple capable de rediriger un utilisateur non connecté vers la page de connexion.
1 modèle = 1 table comme sur symfony

////////// Erreurs courrantes
Erreur Mysql : Impossible d'atteindre la table ou elle est vide
    Vérifier dans le .env les paramètres DB_*
Could not find driver
    Vérifier que le paquet du driver associé est installé (par ex php8.3-mysql)
No application encryption key has been specified
    Pas de clé de l'application détéctée dans le .env, il faut la générer
        php artisan key:generate
Vite manifest not found
    Installer le projet et executer vite :
        npm install
        npm run build
Undefined variable $slot
    Dans le template parent (/resources/views/layouts/app.blade.php), replacer {{ $slot }} par @yield('content')
    Dans le template enfant, utiliser
        @extends('layouts.app')
        @section('content') <!-- code de la page ici --> @endsection
Erreur d'installation de filament :
    Il manque parfois un module : Installation failed, reverting ./composer.json and ./composer.lock to their original content.
    Installer le module correspondant, par exemple ma dernière erreur :
    sudo apt install php8.3-zip
Migration
    Foreign key constraint is incorrectly formed
        Il se peut que la table possédant une clé étrangère soit migrée avant la table primaire. Si c'ets le cas, mettre la table avec la clé étrangère après. Les tables sont executées dans l'ordre alphabétique du nom des fichiers migration

////////////////////////////
Pour faire un crud :
    Créer le modèle et le controlleur, et la migration
    /database/migrations/<date>_create_table>_table.php les $table-><colonne> dans la migration
    /resources/views/<controlleur>/<crud>.blade.php : Faire la vue
    /app/Http/Controllers/<table>Controller.php ajouter la route
    /app/Models/<table>>.php : Ajouter les champs $fillable et les méthodes pour les clés étrangères
    /app/Http/Controllers/<table>Controller.php : coder l'appel de la vue dans la méthode appropiée
    /routes/web.php : Faire la route



