////////////// INSTALLATION
installer angular en global
    npm install -g @angular/cli
créer un nouveau projet
    ng new <nomProjet>
dans un projet git
    npm install
lancer le serveur angular
    ng serve

////////////// COMPOSANTS
créer un composant en ligne de commande
    ng generate component <nomComposant>
Utiliser le component dans un autre component
    import {<Component>} from './<cheminComponent>';
    Dans le @Componant qui va importer, ajouter dans imports
        imports: [<Component>],
    On put alors utiliser le composant dans le template avec la balise référencée par le selector du composant importé, par ex : <app-home></app-home> si selector : 'app-home'
contenu du @Component()
    selector: référencement du composant dans angular
    standalone: booléen si le composant requiert un NgModule.
    imports: dépendances
    template: contenu HTML
    styleUrls: chemin des feuilles de style (par ex : ['./app.component.css'])

////////////// INTERFACE
L'interface est une structure de données de la même façon qu'on l'utilise en POO
créer une interface en ligne de commande
    ng generate interface <nomInterface>

////////////// SERVICES
créer un service en ligne de commande
    ng generate service <nomService> --skip-tests

////////////// INPUTS
Input est un composant qui permet de passer des données d'un parent à un enfant.
Pour l'installer
    import {Input} from '@angular/core';
Utiliser Input dans un component :
    export class HousingLocationComponent { @Input() <interfaceName>!: <ClassInterface>; }
        le "!" signifie qu'on attends des données (non-null assertion operator)

////////////// ROUTING (https://angular.dev/guide/routing/common-router-tasks)
Dans de sichier /app/routes.ts, importer les composants
        import { composant } from './<chemin>';
    ajouter et utiliser le composant router
        import { Routes } from '@angular/router';
        export const routes: Routes = [  { path: '/<route>', component: <component> },  { <...> },];
    utiliser la route dans le composant
        <a routerLink="/first-component" routerLinkActive="active" ariaCurrentWhenActive="page">Home</a>

////////////// CONCEPTS ET VOCABLE
ngFor
    utilisé pour foreach des données, avec un composant, comme une boucle for
        <composant *ngFor="let <variable> of <tableau>" [<variable>]="<variable>"></composant>
service
    data utilisées par n'importe quel composant, doit utiliser le composant Injectable.
non-null assertion operator
    pour indiquer qu'on attend des données, s'écrit "!" après une méthode
property binding
    le fait d'entourer un attribut html par des crochets [ ] pour dynamiser (synchroniser) l'attribut en cas de changement de valeur. Semblable aux props react.
        <element [property]="expression"></element>
Partial<interface>
    Placé devant un type, Partial permet de ne pas utiliser tous les champs de l'interface. En revanche Partial vérifie toujours qu'il n'y ai pas de champs inconnu de l'interface.
